{"name":"Hacker School Monterrey","tagline":"Programa de Backend 2016","body":"# Hacker School Monterrey\r\n\r\nA continuación se presenta el esquema para el programa de backend con duración de 4 semanas impartido en la Hacker School Monterrey.\r\n\r\n## Esquema del programa\r\n\r\nAntes de continuar leyendo es recomendable revisar el 'prework', ya que contiene información sobre los temas a conocer previo a comenzar el programa. Lo puedes revisar [aqui](http://hackerschoolmty.github.io/prework/).\r\n\r\n#### Week 1\r\n\r\n* Introducción a git & Github\r\n \t* Comandos básicos(commit, push, pull, rebase)\r\n\t* Flujo de trabajo con git\r\n\t* Creación de cuenta en Github\r\n\t* Sincronización de un repositorio local con uno remoto\r\n* Introducción a la línea de comandos (bash & zsh)\r\n\t* Creación de directorios\r\n\t* Cambio entre directorios\r\n\t* Remover archivos y/o directorios\r\n* Ruby 101\r\n\t* Tipos de dato: Strings, FixNum, Boolean, Nil\r\n\t* Variables y comentarios\r\n\t* Estructuras de datos: Arrays & Hashes\r\n\t* Condicionales (if, else, unless, conditional assignment)\r\n\t* Ciclos e iteradores\r\n\t* Métodos (class & instances, optional arguments, named arguments, hash arguments, *splat)\r\n\t* Clases (instance variables, method override, self, method visibility, inheritance)\r\n\t* Excepciones\r\n\t* Modulos (include, extend, self.included)\r\n\t* Bloques (yield, pass arguments)\r\n\t* RubyGems\r\n\r\n#### Week 2\r\n\r\n* Ruby avanzado\r\n\t* Procs\r\n\t* Lambdas\r\n\t* Symbol to proc & symbol to block\r\n\t* OpenStruct\r\n\t* Metaprogramming (defined_method, send)\r\n\t* Mising method\r\n\t* Building a DSL\r\n* Introducción a Test Driven Development\r\n\t* Red, green, refactor\r\n\t* ¿Por que TDD?\r\n* Introducción a RSpec\r\n\t* Describe blocks\r\n\t* Context block \r\n\t* Expectations\r\n\t* Matchers\r\n\r\n#### Week 3\r\n\r\n* Filosofía en Rails\r\n* MVC\r\n* Arquitectura tipo RESTful\r\n* Introducción a:\r\n\t* Comandos básicos(server, console, migrations)\r\n\t* Estructura de una aplicación de Rails\r\n\t* Modelos & ActiveRecord (finders, scopes, associations)\r\n\t* Controladores (Strong parameters, action hooks)\r\n\t* Vistas (helpers)\r\n* Enrutamiento básico\r\n* Manejo de usuarios (sessions, registrations)\r\n* Debugging\r\n\t* PRY\r\n\t* Byebug\r\n\r\n#### Week 4\r\n\r\n* Autorización (roles)\r\n* Asociaciones polimórficas\r\n* Asociaciones recursivas\r\n* Enrutamiento avanzado (namespaces, nested resources)\r\n* i18n\r\n* Trabajos en cola con ActiveJob\r\n* RSpec & Rails\r\n\t* Guard\r\n\t* Factories\t \r\n\t* FFaker\r\n\t* Unit testing\r\n\r\n#### Week 5\r\n\r\n* Introducción a API's\r\n\t* Estructura de un web service\r\n\t* Estructura basada en recursos\r\n\t* Estructura de relaciones (objectos embebidos) \r\n\t* Negociación de contenido\r\n* Versionamiento:\r\n\t* Usando parámetros\r\n\t* Usando parámetros en la URL\r\n\t* Usando Headers\r\n* Probando los endpoints\r\n* ActiveModelSerializers\r\n* Explorando la API:\r\n\t* Postman\t\r\n\r\n#### Week 6\r\n\r\n* Administración de usuarios\r\n\t* Creación de usuarios\r\n\t* Manejo de sesiones\r\n* Construyendo endpoints\r\n* Mejores prácticas\r\n* Eager loading & Counter caches\r\n* Caching & paginación\r\n\r\n#### Week 7\r\n\r\n* Patrones de diseño en Rails\r\n\t* MVC\r\n\t* Refactor\r\n\t* Concerns\r\n\t* Presenters\r\n\t* Facade\r\n\t* Null Object pattern\r\n\t* Fat models & skinny controllers\r\n\t* Factory\r\n* Antipatrones de diseño en Rails\r\n\t* God objects\r\n\t* Code duplication\r\n\t* Monolithic controllers\r\n* Code Retreat","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}